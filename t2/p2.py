import time

import requests
import pandas as pd
import numpy as np
import json

import matplotlib.pyplot as plt
import folium


class Solution:
    def __init__(self):
        self.node_num = None
        self.node_name = None
        self.node_loc = None
        self.center_loc = None
        self.cdc_loc = None
        self.hospital_loc = None
        self.hospital_level = None
        self.node_cap = [7, 6, 7, 9, 8, 11, 10, 8, 4, 16, 14]
        self.cdc2hospital = {1: [20], 2: [13], 3: [12, 19], 4: [14, 15], 5: [17], 6: [18, 26], 7: [21, 24], 8: [27],
                             9: [22], 10: [23], 11: [16, 25]}
        self.distance_array = [[0, 10571, 2647, 1222, 5903, 6779, 11864, 25336, 11274, 6510,
                                17803, 22159, 1732, 2294, 4056, 4059, 15175, 8480, 6784, 2328,
                                17558, 36156, 5122, 18555, 32843, 23729, 24759, 10030],
                               [10408, 0, 9488, 9616, 5241, 8892, 17086, 18922, 17089, 15971,
                                23150, 13833, 9774, 10274, 8048, 8269, 7298, 10607, 12163, 10127,
                                11507, 31390, 14583, 22932, 33774, 14949, 29294, 15038],
                               [2061, 9569, 0, 2141, 4901, 7453, 13925, 24118, 10351, 8571,
                                16880, 21157, 1391, 1356, 4725, 2841, 14173, 9568, 8845, 4389,
                                16340, 34938, 7183, 16984, 31625, 22727, 26820, 8629],
                               [1767, 9982, 3316, 0, 5314, 6190, 12039, 24954, 11985, 7050,
                                18514, 21570, 2401, 3005, 3467, 4723, 14586, 8451, 6959, 2361,
                                17176, 36820, 5662, 19266, 33507, 23140, 24879, 10741],
                               [5776, 5318, 4856, 4984, 0, 6144, 13647, 22643, 13638, 11339,
                                19699, 16902, 5142, 5642, 3416, 4818, 9918, 8267, 8567, 5495,
                                15228, 35077, 9951, 19942, 33602, 20518, 26303, 11587],
                               [7852, 9442, 8673, 7060, 7087, 0, 11207, 26767, 17659, 10903,
                                24188, 18619, 8119, 8681, 6272, 9615, 10206, 2359, 6601, 6651,
                                19352, 39201, 9515, 24565, 38399, 20189, 23634, 16210],
                               [12554, 17039, 14530, 12169, 13926, 10518, 0, 34364, 23039, 8505,
                                28770, 28367, 13615, 14177, 12782, 15942, 19954, 10810, 6071, 10338,
                                26949, 46789, 9120, 30325, 44726, 29937, 12925, 21795],
                               [24708, 19077, 23690, 24297, 23165, 26749, 34967, 0, 29008, 30845,
                                28915, 22328, 24038, 24333, 25250, 21293, 23939, 28488, 30012, 25930,
                                8919, 20187, 29457, 25879, 23784, 20970, 47175, 26957],
                               [11015, 16998, 10106, 11033, 13502, 16424, 22688, 29126, 0, 15952,
                                7123, 28782, 10802, 9790, 13701, 9527, 21798, 18685, 17608, 13152,
                                21348, 31502, 15946, 7874, 24667, 29003, 35583, 3127],
                               [7170, 16344, 9146, 7721, 11676, 10286, 8781, 31782, 15808, 0,
                                20370, 27932, 8231, 10066, 9812, 10558, 19722, 11157, 6982, 6481,
                                24004, 42655, 1977, 21925, 39908, 29502, 21725, 15445],
                               [17575, 22734, 15791, 17713, 19238, 22984, 29094, 28848, 7202, 20873,
                                0, 33558, 17073, 16061, 20261, 15263, 27534, 25127, 24168, 19712,
                                25493, 32755, 22072, 4351, 25272, 32723, 42143, 9813],
                               [21252, 13185, 20332, 20460, 16085, 18853, 27616, 21761, 28060, 26815,
                                33024, 0, 20618, 21118, 18892, 19240, 8925, 18070, 22659, 20971,
                                15126, 33304, 25427, 30299, 38585, 2811, 39824, 26009],
                               [1953, 9461, 1321, 2033, 4793, 7345, 13817, 24010, 10393, 8463,
                                16922, 21049, 0, 1080, 4617, 2733, 14065, 9460, 8737, 4281,
                                16232, 34830, 7075, 17026, 31517, 22619, 26712, 8671],
                               [2008, 10266, 1076, 2088, 5598, 7437, 13701, 24627, 9789, 8347,
                                16318, 21854, 1392, 0, 4714, 3538, 14870, 9698, 8621, 4165,
                                16849, 35454, 6959, 16422, 31120, 23424, 26596, 8067],
                               [4645, 8833, 5827, 3853, 4209, 3264, 11415, 26111, 14452, 9666,
                                20981, 20416, 4912, 5474, 0, 7239, 13100, 5525, 6460, 3980,
                                18535, 38589, 8278, 21735, 36023, 21986, 23623, 13208],
                               [4055, 8233, 3037, 4135, 5107, 9323, 15919, 21602, 9909, 10565,
                                15970, 20262, 3385, 3889, 6647, 0, 13278, 11098, 10839, 6383,
                                13824, 32422, 9177, 15966, 29109, 21268, 28814, 7858],
                               [15055, 7472, 14135, 14263, 9888, 11065, 19755, 23651, 21863, 19232,
                                27924, 9629, 14421, 14921, 12695, 13043, 0, 10209, 14798, 14774,
                                16306, 33823, 17844, 28319, 39703, 11195, 31963, 19812],
                               [9433, 11272, 10903, 8973, 9317, 4800, 11247, 28778, 19691, 11781,
                                26220, 19235, 10151, 10713, 8304, 11845, 10822, 0, 6963, 7529,
                                21363, 41212, 10393, 26795, 40629, 20805, 23515, 18440],
                               [7403, 11935, 9379, 7018, 8775, 5414, 6130, 29260, 17888, 6636,
                                24417, 23263, 8464, 9026, 7631, 10791, 14850, 5973, 0, 5187,
                                21845, 41688, 5248, 25169, 39575, 24833, 18441, 16644],
                               [2857, 10481, 4833, 2472, 5813, 5748, 10246, 26376, 13342, 5896,
                                19871, 22069, 3918, 4480, 3949, 6245, 15085, 6981, 5166, 0,
                                18598, 38342, 4508, 20623, 35029, 23639, 23070, 12098],
                               [17656, 11544, 16638, 17245, 15632, 19216, 27434, 8834, 21956, 23793,
                                25907, 15365, 16986, 17281, 18198, 14241, 16406, 20955, 22479, 18878,
                                0, 23869, 22405, 23182, 24997, 14530, 39642, 19905],
                               [35776, 31009, 34758, 35856, 35067, 38679, 46869, 19758, 31534, 42286,
                                32756, 33477, 35106, 35411, 37874, 32361, 33894, 40390, 41914, 38104,
                                23708, 0, 40898, 29720, 12218, 31966, 59077, 32016],
                               [5475, 14649, 7451, 6026, 9981, 8591, 9022, 30087, 15455, 1682,
                                21200, 26237, 6536, 7098, 8117, 8863, 18027, 9462, 5287, 4786,
                                22309, 40960, 0, 22557, 37647, 27807, 21966, 14716],
                               [17403, 22251, 15561, 17483, 19008, 22874, 29077, 25920, 7384, 21612,
                                3806, 30695, 16843, 15831, 20151, 15422, 27304, 24897, 23997, 19541,
                                22630, 29827, 22335, 0, 22344, 29860, 41972, 10210],
                               [32267, 35157, 31249, 32347, 33305, 37521, 44131, 22865, 24320, 38777,
                                25327, 40383, 31597, 31438, 34945, 28852, 41154, 39296, 39051, 34595,
                                25969, 12405, 37389, 22291, 0, 39548, 57026, 26741],
                               [24035, 15374, 23115, 23243, 18868, 21636, 30399, 21076, 29541, 29598,
                                33196, 2880, 23401, 23901, 21675, 21691, 11659, 20853, 25442, 23754,
                                15298, 32619, 28210, 30471, 38757, 0, 42607, 27490],
                               [25023, 29218, 26999, 24638, 26343, 22697, 12782, 46543, 35508, 21040,
                                41305, 40546, 26084, 26646, 25199, 28411, 32133, 23256, 18503, 22807,
                                39128, 58968, 21655, 42860, 57195, 42116, 0, 34264],
                               [9420, 15426, 8511, 9438, 11930, 14829, 21093, 27554, 2855, 14845,
                                9475, 27210, 9207, 8195, 12106, 7955, 20226, 17090, 16013, 11557,
                                19776, 31793, 14351, 10226, 26335, 27431, 33988, 0]]

        self.init_p2()

    def init_p2(self):
        path = "data/data1.xlsx"
        df = pd.read_excel(path, sheet_name=0)
        self.node_num = df.shape[0]
        self.node_loc = np.array(df.iloc[:, 1:3])
        self.node_name = np.array(df.iloc[:, 0])
        self.cdc_loc = np.array(df.iloc[1:11, 1:3])
        self.hospital_loc = np.array(df.iloc[11:, 1:3])
        self.hospital_level = np.array(df.iloc[11:, 3])
        self.center_loc = np.squeeze(np.array(df.iloc[0:1, 1:3]))
        # self.distance_array = np.zeros((len(self.node_loc), len(self.node_loc)))

    @staticmethod
    def get_road_from_baidu(loc1, loc2):
        """
        从百度api获取路径规划
        :param loc1: 起点经纬度[120.234488, 30.313231]
        :param loc2: 终点经纬度[120.234488, 30.313231]
        :return:
        """
        if loc1[1] == loc2[1] and loc1[0] == loc2[0]:
            return 0
        s1 = str(loc1[1]) + "," + str(loc1[0])
        s2 = str(loc2[1]) + "," + str(loc2[0])
        ak = "iz1iVNn7OzG6iBc1wA5e0naACuEbq8qD"
        url = "http://api.map.baidu.com/direction/v2/driving?tactics=2&origin={}&destination={}&ak={}".format(s1, s2,
                                                                                                              ak)
        result = requests.get(url)
        result_json = json.loads(result.text)
        s = result_json['result']['routes'][0]['distance']
        return s

    def test(self):
        for i in range(len(self.node_loc)):
            for j in range(len(self.node_loc)):
                self.distance_array[i][j] = self.get_road_from_baidu(self.node_loc[i], self.node_loc[j])
        print(self.distance_array)

    def p3(self):
        dis = 0
        for i in range(1, 12):
            cdc = i
            hospital = self.cdc2hospital[cdc]
            cap = self.node_cap[cdc - 1]
            node_num = len(hospital)
            cap_avg = cap / node_num
            temp_node_cap = []
            for node in range(node_num):
                temp_node_cap.append(cap_avg)
            for j in range(len(hospital)):
                if temp_node_cap[j] > 5:
                    dis += self.distance_array[cdc][self.cdc2hospital[cdc][j]]
                    dis += self.distance_array[self.cdc2hospital[cdc][j]][cdc]
                    dis += self.distance_array[cdc][self.cdc2hospital[cdc][j]]
                    dis += self.distance_array[self.cdc2hospital[cdc][j]][cdc]
                else:
                    dis += self.distance_array[cdc][self.cdc2hospital[cdc][j]]
                    dis += self.distance_array[self.cdc2hospital[cdc][j]][cdc]
        print(dis)

    def run(self):
        cost = 0
        r = []
        r.append(0)
        for i in range(1, 12):
            cdc = i
            cost1 = self.dis2cost(self.distance_array[cdc - 1][cdc], 0)
            r.append(cdc)
            cost += cost1
            cap = self.node_cap[cdc - 1]
            node_num = len(self.cdc2hospital[cdc])
            cap_avg = cap / node_num
            temp_node_cap = []
            for node in range(node_num):
                temp_node_cap.append(cap_avg)
            for j in range(len(self.cdc2hospital[cdc])):
                cost2 = 0
                if temp_node_cap[j] > 5:
                    cost2 += (self.dis2cost(self.distance_array[cdc][self.cdc2hospital[cdc][j]], 5) +
                              self.dis2cost(self.distance_array[self.cdc2hospital[cdc][j]][cdc], 5)) * (
                                     temp_node_cap[j] / 5)
                    r.append(self.cdc2hospital[cdc][j])
                    r.append(cdc)
                    r.append(self.cdc2hospital[cdc][j])
                    r.append(cdc)
                    cost2 += self.dis2cost(self.distance_array[cdc][self.cdc2hospital[cdc][j]],
                                           temp_node_cap[j] % 5) + self.dis2cost(
                        self.distance_array[self.cdc2hospital[cdc][j]][cdc], 0)

                else:
                    r.append(self.cdc2hospital[cdc][j])
                    r.append(cdc)
                    cost2 += self.dis2cost(self.distance_array[cdc][self.cdc2hospital[cdc][j]],
                                           temp_node_cap[j] % 5) + self.dis2cost(
                        self.distance_array[self.cdc2hospital[cdc][j]][cdc], 0)
                cost += cost2
        print(cost)
        print(r)

    @staticmethod
    def dis2cost(dis, cap):
        return (dis / 1000) * (20 + cap * 10)


if __name__ == '__main__':
    solution = Solution()
    # solution.test()
    solution.p3()
